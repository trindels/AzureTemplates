{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.34",
    "parameters": {
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "String",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "srcIPInboundNSG": {
            "defaultValue": "0.0.0.0/0",
            "type": "String",
            "metadata": {
                "description": "Your source public IP address. Added to the inbound NSG on eth0 (MGMT)"
            }
        },
        "deploymentModel": {
            "defaultValue": "active-active",
            "allowedValues": [
                "active-active",
                "active-passive",
                "single-server"
            ],
            "type": "String",
            "metadata": {
                "description": "Select your Palo Alto Firewall Deployment Model"
            }
        },
        "vmName1": {
            "type": "String",
            "metadata": {
                "description": "Name of VM-Series VM in the Azure portal"
            }
        },
        "vmName2": {
            "type": "String",
            "metadata": {
                "description": "Name of VM-Series VM in the Azure portal"
            }
        },
        "imageVersion": {
            "defaultValue": "latest",
            "allowedValues": [
                "latest",
                "10.0.4",
                "10.0.3",
                "10.0.2",
                "10.0.1",
                "10.0.0",
                "9.1.9",
                "9.1.8",
                "9.1.6",
                "9.1.3",
                "9.1.2"
            ],
            "type": "String",
            "metadata": {
                "description": "Version number of VM-Series VM in the Azure portal"
            }
        },
        "imageSku": {
            "defaultValue": "bundle2",
            "allowedValues": [
                "byol",
                "bundle1",
                "bundle2"
            ],
            "type": "String",
            "metadata": {
                "description": "License SKU of VM-Series VM in the Azure portal"
            }
        },
        "vmSize": {
            "defaultValue": "Standard_D3_v2",
            "allowedValues": [
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D4_v3",
                "Standard_D16_v3",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2"
            ],
            "type": "String",
            "metadata": {
                "description": "Azure VM size for VM-Series"
            }
        },
        "paloAltoAdminUsername": {
            "type": "String",
            "metadata": {
                "description": "Username of the administrator account of VM-Series"
            }
        },
        "paloAltoAuthenticationType": {
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "type": "String",
            "metadata": {
                "description": "Type of administrator user authentication "
            }
        },
        "paloAltoPasswordOrKey": {
            "type": "SecureString",
            "metadata": {
                "description": "Password or ssh key for the administrator account of VM-Series."
            }
        },
        "bootstrap": {
            "defaultValue": "no",
            "allowedValues": [
                "yes",
                "no"
            ],
            "type": "String",
            "metadata": {
                "description": "Pass bootstrap data to VM"
            }
        },
        "customData": {
            "defaultValue": "echo customData",
            "type": "String",
            "metadata": {
                "description": "String passed down to the Virtual Machine."
            }
        },
        "virtualNetworkName": {
            "type": "String",
            "metadata": {
                "description": "Name of the Virtual Network (VNET)"
            }
        },        
        "vnetNewOrExisting": {
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "type": "String",
            "metadata": {
                "description": "Use new or existing VNET"
            }
        },
        "virtualNetworkExistingRGName": {
            "defaultValue": "#n/a",
            "type": "String",
            "metadata": {
                "description": "Name of resource group of existing VNET (if applicable)"
            }
        },
        "virtualNetworkAddressPrefixes": {
            "defaultValue": "192.168.0.0/16",
            "type": "String",
            "metadata": {
                "description": "Virtual network address CIDR"
            }
        },
        "mgmtSubnetName": {
            "defaultValue": "Mgmt",
            "type": "String",
            "metadata": {
                "description": "Subnet for Management"
            }
        },
        "mgmtSubnetPrefix": {
            "defaultValue": "192.168.0.0/24",
            "type": "String",
            "metadata": {
                "description": "Mgmt subnet CIDR"
            }
        },
        "mgmtIpAddressVm01": {
            "defaultValue": "192.168.0.4",
            "type": "String",
            "metadata": {
                "description": "Mgmt Interface IP Address of VM01"
            }
        },
        "mgmtIpAddressVm02": {
            "defaultValue": "192.168.0.5",
            "type": "String",
            "metadata": {
                "description": "Mgmt Interface IP Address of VM02"
            }
        },
        "untrustSubnetName": {
            "defaultValue": "Untrust",
            "type": "String",
            "metadata": {
                "description": "Subnet for Untrust"
            }
        },
        "untrustSubnetPrefix": {
            "defaultValue": "192.168.1.0/24",
            "type": "String",
            "metadata": {
                "description": "Untrust subnet CIDR"
            }
        },
        "untrustIpAddressVm01": {
            "defaultValue": "192.168.1.4",
            "type": "String",
            "metadata": {
                "description": "Untrust Interface IP Address of VM01"
            }
        },
        "untrustIpAddressVm02": {
            "defaultValue": "192.168.1.5",
            "type": "String",
            "metadata": {
                "description": "Untrust Interface IP Address of VM02"
            }
        },
        "trustSubnetName": {
            "defaultValue": "Trust",
            "type": "String",
            "metadata": {
                "description": "Subnet for Trust"
            }
        },
        "trustSubnetPrefix": {
            "defaultValue": "192.168.2.0/24",
            "type": "String",
            "metadata": {
                "description": "Trust subnet CIDR"
            }
        },
        "trustIpAddressVm01": {
            "defaultValue": "192.168.2.4",
            "type": "String",
            "metadata": {
                "description": "Trust Interface IP Address of VM01"
            }
        },
        "trustIpAddressVm02": {
            "defaultValue": "192.168.2.5",
            "type": "String",
            "metadata": {
                "description": "Trust Interface IP Address of VM02"
            }
        },
        "trustIpAddressLB": {
            "defaultValue": "192.168.2.6",
            "type": "String",
            "metadata": {
                "description": "Trust IP Address of Internal Load Balancer"
            }
        },
        "haSubnetName": {
            "defaultValue": "HA",
            "type": "String",
            "metadata": {
                "description": "Subnet for HA"
            }
        },
        "haSubnetPrefix": {
            "defaultValue": "192.168.3.0/24",
            "type": "String",
            "metadata": {
                "description": "HA subnet CIDR"
            }
        },
        "haIpAddressVm01": {
            "defaultValue": "192.168.3.4",
            "type": "String",
            "metadata": {
                "description": "HA Interface IP Address of VM01"
            }
        },
        "haIpAddressVm02": {
            "defaultValue": "192.168.3.5",
            "type": "String",
            "metadata": {
                "description": "HA Interface IP Address of VM02"
            }
        },
        "publicIPAddressNewOrExisting": {
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "type": "String",
            "metadata": {
                "description": "Public IP for mgmt interface is new or existing"
            }
        },
        "publicIPAddressExistingRGName": {
            "defaultValue": "#n/a",
            "type": "String",
            "metadata": {
                "description": "Name of existing public IP resource group"
            }
        },
        "publicIPAddressName1": {
            "type": "String",
            "metadata": {
                "description": "Name of existing public IP resource"
            }
        },
        "publicIPAddressName2": {
            "type": "String",
            "metadata": {
                "description": "Name of existing public IP resource"
            }
        },
        "publicIPAllocationMethod": {
            "defaultValue": "Static",
            "allowedValues": [
                "Dynamic",
                "Static"
            ],
            "type": "String",
            "metadata": {
                "description": "Allocation method of public IP resource"
            }
        },
        "availabilitySetName": {
            "defaultValue": "None",
            "type": "String"
        },
        "availabilitySetPlatformFaultDomainCount": {
            "defaultValue": "2",
            "type": "String"
        },
        "availabilitySetPlatformUpdateDomainCount": {
            "defaultValue": "5",
            "type": "String"
        },
        "externalLoadBalancerName": {
            "type": "String"
        },
        "externalLoadBalancerPublicIPAddressName": {
            "type": "String",
            "metadata": {
                "description": "Name of existing External Load Balancer - Public IP resource"
            }
        },

        "externalLoadBalancerPublicIPAddressNewOrExisting": {
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "type": "String",
            "metadata": {
                "description": "Public IP for External Load Balancer is new or existing"
            }
        },
        "externalLoadBalancerPublicIPAddressExistingRGName": {
            "defaultValue": "#n/a",
            "type": "String",
            "metadata": {
                "description": "Name of existing External Load Balancer - Public IP resource group"
            }
        },
        "internalLoadBalancerName": {
            "type": "String"
        }
    },
    "variables": {
        "imagePublisher": "paloaltonetworks",
        "imageSku": "[parameters('imageSku')]",
        "imageOffer": "vmseries-flex",
        "nsgName": "DefaultNSG",
        "vm1nicName": "[concat(parameters('vmName1'), '-eth')]",
        "vm2nicName": "[concat(parameters('vmName2'), '-eth')]",
        "vnetIdExisting": "[resourceId(parameters('virtualNetworkExistingRGName'),'Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
        "vnetIdNew": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
        "mgmtSubnetRef": "[concat(if(equals(parameters('vnetNewOrExisting'),'new'), variables('vnetIdNew'), variables('vnetIdExisting')),'/subnets/',parameters('mgmtSubnetName'))]",
        "trustSubnetRef": "[concat(if(equals(parameters('vnetNewOrExisting'),'new'), variables('vnetIdNew'), variables('vnetIdExisting')),'/subnets/',parameters('trustSubnetName'))]",
        "untrustSubnetRef": "[concat(if(equals(parameters('vnetNewOrExisting'),'new'), variables('vnetIdNew'), variables('vnetIdExisting')),'/subnets/',parameters('untrustSubnetName'))]",
        "haSubnetRef": "[concat(if(equals(parameters('vnetNewOrExisting'),'new'), variables('vnetIdNew'), variables('vnetIdExisting')),'/subnets/',parameters('haSubnetName'))]",
        "virtualNetworkAddressPrefix": "[split(parameters('virtualNetworkAddressPrefixes'),',')]",
        "externalLoadBalancerPublicIpRef": "[if(equals(parameters('externalLoadBalancerPublicIPAddressNewOrExisting'), 'existing'), resourceId(parameters('externalLoadBalancerPublicIPAddressExistingRGName'), 'Microsoft.Network/publicIPAddresses', parameters('externalLoadBalancerPublicIPAddressName')), resourceId('Microsoft.Network/publicIPAddresses',parameters('externalLoadBalancerPublicIPAddressName')))]",
        "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
        },
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('paloAltoAdminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('paloAltoPasswordOrKey')]"
                    }
                ]
            }
        },
        "subnetsBase": [
            {
                "name": "[parameters('mgmtSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('mgmtSubnetPrefix')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                    }
                }
            },
            {
                "name": "[parameters('trustSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('untrustSubnetPrefix')]"
                }
            },
            {
                "name": "[parameters('untrustSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('trustSubnetPrefix')]"
                }
            }
        ],
        "subnetsAP": [
            {
                "name": "[parameters('haSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('haSubnetPrefix')]"
                }
            }
        ],
        "subnets": "[if(equals(parameters('deploymentModel'),'active-passive'),concat(variables('subnetsBase'),variables('subnetsAP')),variables('subnetsBase'))]",
        "nicsVm1Base": [
            {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vm1nicName'),'0'))]",
                "properties": {
                    "primary": true
                }
            },
            {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vm1nicName'),'1'))]",
                "properties": {
                    "primary": false
                }
            },
            {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vm1nicName'),'2'))]",
                "properties": {
                    "primary": false
                }
            }
        ],
        "nicsVm1Ap": [
            {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vm1nicName'),'3'))]",
                "properties": {
                    "primary": false
                }
            }
        ],
        "nicsVm1": "[if(equals(parameters('deploymentModel'),'active-passive'),concat(variables('nicsVm1Base'),variables('nicsVm1Ap')),variables('nicsVm1Base'))]",
        "nicsVm2Base": [
            {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vm2nicName'),'0'))]",
                "properties": {
                    "primary": true
                }
            },
            {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vm2nicName'),'1'))]",
                "properties": {
                    "primary": false
                }
            },
            {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vm2nicName'),'2'))]",
                "properties": {
                    "primary": false
                }
            }
        ],
        "nicsVm2Ap": [
            {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vm2nicName'),'3'))]",
                "properties": {
                    "primary": false
                }
            }
        ],
        "nicsVm2": "[if(equals(parameters('deploymentModel'),'active-passive'),concat(variables('nicsVm2Base'),variables('nicsVm2Ap')),variables('nicsVm2Base'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-07-01",
            "name": "[parameters('externalLoadBalancerPublicIPAddressName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('externalLoadBalancerPublicIPAddressName')]"
                }
            },
            "condition": "[equals(parameters('externalLoadBalancerPublicIPAddressNewOrExisting'), 'new')]"
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-07-01",
            "name": "[parameters('publicIPAddressName1')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "properties": {
                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('publicIPAddressName1')]"
                }
            },
            "condition": "[equals(parameters('publicIPAddressNewOrExisting'), 'new')]"
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-07-01",
            "name": "[parameters('publicIPAddressName2')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "properties": {
                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('publicIPAddressName2')]"
                }
            },
            "condition": "[and(not(equals(parameters('deploymentModel'),'single-server')),equals(parameters('publicIPAddressNewOrExisting'), 'new'))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2017-10-01",
            "name": "[variables('nsgName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "Allow-Outside-From-IP",
                        "properties": {
                            "description": "Rule",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "[parameters('srcIPInboundNSG')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Allow-Intra",
                        "properties": {
                            "description": "Allow intra network traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Default-Deny",
                        "properties": {
                            "description": "Default-Deny if we don't match Allow rule",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2017-10-01",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[variables('virtualNetworkAddressPrefix')]"
                },
                "subnets": "[if(equals(parameters('deploymentModel'),'active-passive'),variables('subnetsAP'),variables('subnets'))]"
            },
            "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]"
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "name": "[concat(variables('vm1nicName'), '0')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName1'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig-mgmt",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('mgmtIpAddressVm01')]",
                            "privateIPAddressVersion": "IPv4",
                            "publicIPAddress": {
                                "id": "[if(equals(parameters('publicIPAddressNewOrExisting'), 'existing'), resourceId(parameters('publicIPAddressExistingRGName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName1')), resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName1')))]"
                            },
                            "subnet": {
                                "id": "[variables('mgmtSubnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "name": "[concat(variables('vm1nicName'), '1')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName'))]"
            ],
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[if(equals(parameters('imageVersion'), '8.1.9'), 'false', 'true')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig-untrust",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('untrustIpAddressVm01')]",
                            "privateIPAddressVersion": "IPv4",
                            "subnet": {
                                "id": "[variables('trustSubnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/backendAddressPools/BackendPool01')]"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "name": "[concat(variables('vm1nicName'), '2')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName'))]"
            ],
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[if(equals(parameters('imageVersion'), '8.1.9'), 'false', 'true')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig-trust",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('trustIpAddressVm01')]",
                            "privateIPAddressVersion": "IPv4",
                            "subnet": {
                                "id": "[variables('untrustSubnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/backendAddressPools/BackendPool01')]"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "name": "[concat(variables('vm1nicName'), '3')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[if(equals(parameters('imageVersion'), '8.1.9'), 'false', 'true')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig-ha",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('haIpAddressVm01')]",
                            "privateIPAddressVersion": "IPv4",
                            "subnet": {
                                "id": "[variables('haSubnetRef')]"
                            }
                        }
                    }
                ]
            },
            "condition": "[equals(parameters('deploymentModel'),'active-passive')]"
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "name": "[concat(variables('vm2nicName'), '0')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName2'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig-mgmt",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('mgmtIpAddressVm02')]",
                            "privateIPAddressVersion": "IPv4",
                            "publicIPAddress": {
                                "id": "[if(equals(parameters('publicIPAddressNewOrExisting'), 'existing'), resourceId(parameters('publicIPAddressExistingRGName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName2')), resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName2')))]"
                            },
                            "subnet": {
                                "id": "[variables('mgmtSubnetRef')]"
                            }
                        }
                    }
                ]
            },
            "condition": "[not(equals(parameters('deploymentModel'),'single-server'))]"
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "name": "[concat(variables('vm2nicName'), '1')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName'))]"
            ],
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[if(equals(parameters('imageVersion'), '8.1.9'), 'false', 'true')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig-untrust",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('untrustIpAddressVm02')]",
                            "privateIPAddressVersion": "IPv4",
                            "subnet": {
                                "id": "[variables('trustSubnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/backendAddressPools/BackendPool01')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "condition": "[not(equals(parameters('deploymentModel'),'single-server'))]"
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "name": "[concat(variables('vm2nicName'), '2')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName'))]"
            ],
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[if(equals(parameters('imageVersion'), '8.1.9'), 'false', 'true')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig-trust",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('trustIpAddressVm02')]",
                            "privateIPAddressVersion": "IPv4",
                            "subnet": {
                                "id": "[variables('untrustSubnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/backendAddressPools/BackendPool01')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "condition": "[not(equals(parameters('deploymentModel'),'single-server'))]"
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "name": "[concat(variables('vm2nicName'), '3')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[if(equals(parameters('imageVersion'), '8.1.9'), 'false', 'true')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig-ha",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('haIpAddressVm02')]",
                            "privateIPAddressVersion": "IPv4",
                            "subnet": {
                                "id": "[variables('haSubnetRef')]"
                            }
                        }
                    }
                ]
            },
            "condition": "[and(not(equals(parameters('deploymentModel'),'single-server')),equals(parameters('deploymentModel'),'active-passive'))]"
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2018-06-01",
            "name": "[parameters('availabilitySetName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "sku": {
                "name": "aligned"
            },
            "properties": {
                "platformFaultDomainCount": "[parameters('availabilitySetPlatformFaultDomainCount')]",
                "platformUpdateDomainCount": "[parameters('availabilitySetPlatformUpdateDomainCount')]"
            },
            "condition": "[not(equals(parameters('availabilitySetName'), 'None'))]"
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2018-06-01",
            "name": "[parameters('vmName1')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName1'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[concat(variables('vm1nicName'), '0')]",
                "[concat(variables('vm1nicName'), '1')]",
                "[concat(variables('vm1nicName'), '2')]",
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            ],
            "plan": {
                "name": "[variables('imageSku')]",
                "product": "[variables('imageOffer')]",
                "publisher": "[variables('imagePublisher')]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmName1')]",
                    "adminUsername": "[parameters('paloAltoAdminUsername')]",
                    "adminPassword": "[parameters('paloAltoPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('paloAltoAuthenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
                    "customData": "[if(equals(parameters('bootstrap'), 'no'), json('null'), base64(parameters('customData')))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSku')]",
                        "version": "[parameters('imageVersion')]"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": "[variables('nicsVm1')]"
                },
                "availabilitySet": "[if(equals(parameters('availabilitySetName'), 'None'), json('null'), variables('availabilitySet'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2018-06-01",
            "name": "[parameters('vmName2')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName2'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[concat(variables('vm2nicName'), '0')]",
                "[concat(variables('vm2nicName'), '1')]",
                "[concat(variables('vm2nicName'), '2')]",
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            ],
            "plan": {
                "name": "[variables('imageSku')]",
                "product": "[variables('imageOffer')]",
                "publisher": "[variables('imagePublisher')]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmName2')]",
                    "adminUsername": "[parameters('paloAltoAdminUsername')]",
                    "adminPassword": "[parameters('paloAltoPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('paloAltoAuthenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
                    "customData": "[if(equals(parameters('bootstrap'), 'no'), json('null'), base64(parameters('customData')))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSku')]",
                        "version": "[parameters('imageVersion')]"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": "[variables('nicsVm2')]"
                },
                "availabilitySet": "[if(equals(parameters('availabilitySetName'), 'None'), json('null'), variables('availabilitySet'))]"
            },
            "condition": "[not(equals(parameters('deploymentModel'),'single-server'))]"
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2020-11-01",
            "name": "[parameters('internalLoadBalancerName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('trustIpAddressLB')]",
                            "privateIPAddressVersion": "IPv4",
                            "subnet": {
                                "id": "[variables('untrustSubnetRef')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "BackendPool01",
                        "properties": {
                            "loadBalancerBackendAddresses": []
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "HARule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
                            },
                            "frontendPort": 0,
                            "backendPort": 0,
                            "enableFloatingIP": true,
                            "idleTimeoutInMinutes": 30,
                            "protocol": "All",
                            "enableTcpReset": true,
                            "loadDistribution": "SourceIPProtocol",
                            "disableOutboundSnat": true,
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/backendAddressPools/BackendPool01')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/probes/Probe22')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "Probe22",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "inboundNatRules": [],
                "outboundRules": [],
                "inboundNatPools": []
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2020-11-01",
            "name": "[parameters('externalLoadBalancerName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('externalLoadBalancerPublicIPAddressName'))]"
            ],
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[variables('externalLoadBalancerPublicIpRef')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "BackendPool01",
                        "properties": {
                            "loadBalancerBackendAddresses": []
                        }
                    }
                ],
                "loadBalancingRules": [],
                "probes": [
                    {
                        "name": "Probe22",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "inboundNatRules": [],
                "outboundRules": [],
                "inboundNatPools": []
            }
        }
    ]
}